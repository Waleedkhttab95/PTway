{"version":3,"sources":["webpack:///./src/app/add-job/job.service.ts","webpack:///./src/app/add-project/project.service.ts","webpack:///./src/app/rest.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { JobData } from './job-data.model';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\nconst BackUrl = 'https://cors-anywhere.herokuapp.com/https://ptway-dev.herokuapp.com/api';\r\n\r\n@Injectable({ providedIn: 'root' })\r\n\r\nexport class JobService {\r\n\r\n    private job: JobData[] = [];\r\n    private jobsUpdated = new Subject<{ posts: JobData[], jobCount: number }>();\r\n\r\n    constructor(private http: HttpClient, private router: Router) { }\r\n\r\n    private extractData(res: Response) {\r\n        let body = res;\r\n        return body || {};\r\n    }\r\n\r\n    addJob(data: any) {\r\n        this.http\r\n            .post<{ job: JobData }>(BackUrl + '/postjob', data)\r\n            .subscribe(responseData => {\r\n                this.router.navigate(['/']);\r\n            });\r\n    }\r\n\r\n    sendJob(data: any) {\r\n        this.http\r\n            .post(BackUrl + '/send/Jobad', data)\r\n            .subscribe(responseData => {\r\n                this.router.navigate(['/']);\r\n            });\r\n    }\r\n\r\n    getJobs(id: String) {\r\n        return this.http.get<{jobName: [String],  count: Number, id: [String]}>(BackUrl + '/get/jobs?id='+ id)\r\n    }\r\n\r\n  \r\n\r\n\r\n    getJob(id: String) {\r\n       return this.http\r\n            .get(BackUrl + '/getjob?id=' + id)\r\n           \r\n            ;\r\n    }\r\n\r\n    deleteJob(id: String) {\r\n        this.http\r\n            .delete(BackUrl + '/deletejob?id=' + id).subscribe(() => {\r\n                console.log('Deleted');\r\n            });\r\n    }\r\n\r\n    // getcountry() {\r\n    //     this.http\r\n    //         .get(BackUrl + '/getcountry').subscribe(data => {\r\n    //             console.log(data);\r\n    //             return data;\r\n    //         });\r\n    // }\r\n    getcountry(): Observable<any> {\r\n        return this.http.get(BackUrl + '/getcountry').pipe(\r\n            map(this.extractData));\r\n    }\r\n\r\n    // getcity() {\r\n    //     this.http\r\n    //         .get(BackUrl + '/getcity').subscribe(data => {\r\n    //             console.log(data);\r\n    //             return data;\r\n    //         });\r\n    // }\r\n\r\n    getcity(): Observable<any> {\r\n        return this.http.get(BackUrl + '/getcity').pipe(\r\n            map(this.extractData));\r\n    }\r\n\r\n    getsectors() {\r\n        this.http\r\n            .get(BackUrl + '/getsectors').subscribe(data => {\r\n                console.log(data);\r\n                return data;\r\n            });\r\n    }\r\n\r\n    getspecialization() {\r\n        this.http\r\n            .get(BackUrl + '/getspec').subscribe(data => {\r\n                console.log(data);\r\n                return data;\r\n            });\r\n    }\r\n\r\n    // getcontracts() {\r\n    //     this.http\r\n    //     .get(BackUrl + '/getcontracts').subscribe(data =>{\r\n    //         console.log(data);\r\n    //         return data;\r\n    //     });\r\n    // }\r\n\r\n    getcontracts(): Observable<any> {\r\n        return this.http.get(BackUrl + '/getcontracts').pipe(\r\n            map(this.extractData));\r\n    }\r\n\r\n    // getprojects() {\r\n    //     this.http\r\n    //         .get(BackUrl + '/getprojects')\r\n    //         .subscribe(data => {\r\n    //             console.log(data);\r\n    //         });\r\n    // }\r\n\r\n    getprojects(): Observable<any> {\r\n        return this.http.get(BackUrl + '/getprojects').pipe(\r\n            map(this.extractData));\r\n    }\r\n\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\nimport { ProjectData } from './project-data.model';\r\n\r\nconst BackUrl = 'https://cors-anywhere.herokuapp.com/https://ptway-dev.herokuapp.com/api';\r\n@Injectable({ providedIn: 'root' })\r\n\r\nexport class ProjectService {\r\n\r\n    private project: ProjectData[] = [];\r\n    projectId: String;\r\n    constructor(private http: HttpClient, private router: Router) {}\r\n\r\n    addproject(data: any) {\r\n      this.http\r\n      .post<{project: ProjectData, _id: String}>(BackUrl + '/postproject' , data)\r\n      .subscribe(responseData => {\r\n          this.projectId = responseData._id;\r\n          console.log(this.projectId);\r\n\r\n         this.router.navigate(['/my-projects']);\r\n      });\r\n    }\r\n\r\n    getprojects(id: String) {\r\n        return this.http\r\n        .get<{projectName: [String],  count: Number, id: [String]}>(BackUrl + '/getprojects?id='+ id)\r\n    }\r\n\r\n    getproject(id: String) {\r\n        this.http\r\n        .get(BackUrl + '/getproject?id=' + id)\r\n        .subscribe(data =>{\r\n            console.log(data);\r\n            return data;\r\n        });\r\n    }\r\n\r\n    deleteproject(id: String) {\r\n       this.http\r\n        .delete(BackUrl + '/deleteproject?id=' + id).subscribe(() =>{\r\n            console.log('Deleted');\r\n        });\r\n    }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\n\r\nconst endpoint = 'https://ptway-dev.herokuapp.com/';\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({\r\n    'Content-Type':  'application/json'\r\n  })\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RestService {\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  private extractData(res: Response) {\r\n    let body = res;\r\n    return body || { };\r\n  }\r\n\r\n\r\n  getUsers(id): Observable<any> {\r\n    return this.http.get(endpoint + 'users/' + id).pipe(\r\n      map(this.extractData));\r\n  }\r\n\r\n  userRegistreing(data:any): Observable<any> {\r\n    console.log(data);\r\n    return this.http.post<any>(endpoint + 'api/userRegistreing', JSON.stringify(data), httpOptions).pipe(\r\n      tap((data) => console.log(`user Registre succes w/ id=${data.id}`)),\r\n      catchError(this.handleError<any>('userRegistreing'))\r\n    );\r\n  }\r\n\r\n  companyRegistreing(data:any): Observable<any> {\r\n    console.log(data);\r\n    return this.http.post<any>(endpoint + 'api/companyRegistreing', JSON.stringify(data), httpOptions).pipe(\r\n      tap((data) => console.log(`comapny Registre succes w/ id=${data.id}`)),\r\n      catchError(this.handleError<any>('companyRegistreing'))\r\n    );\r\n  }\r\n\r\n  postuserinfo(data:any): Observable<any> {\r\n    console.log(data);\r\n    return this.http.post<any>(endpoint + 'api/postuserinfo', JSON.stringify(data), httpOptions).pipe(\r\n      tap((data) => console.log(`user succes complete his data  w/ id=${data.id}`)),\r\n      catchError(this.handleError<any>('postuserinfo'))\r\n    );\r\n  }\r\n\r\n  userlogin(data:any): Observable<any> {\r\n    console.log(data);\r\n    return this.http.post<any>(endpoint + 'api/login', JSON.stringify(data), httpOptions).pipe(\r\n      tap((data) => console.log(`user login succes w/ id=${data.id}`)),\r\n      catchError(this.handleError<any>('userlogin'))\r\n    );\r\n  }\r\n\r\n  postcompanyinfo(data:any): Observable<any> {\r\n    console.log(data);\r\n    return this.http.post<any>(endpoint + 'api/postcompanyinfo', JSON.stringify(data), httpOptions).pipe(\r\n      tap((data) => console.log(`company succes complete data w/ id=${data.id}`)),\r\n      catchError(this.handleError<any>('postcompanyinfo'))\r\n    );\r\n  }\r\n\r\n  updateProduct (id, product): Observable<any> {\r\n    return this.http.put(endpoint + 'products/' + id, JSON.stringify(product), httpOptions).pipe(\r\n      tap(_ => console.log(`updated product id=${id}`)),\r\n      catchError(this.handleError<any>('updateProduct'))\r\n    );\r\n  }\r\n\r\n  deleteProduct (id): Observable<any> {\r\n    return this.http.delete<any>(endpoint + 'products/' + id, httpOptions).pipe(\r\n      tap(_ => console.log(`deleted product id=${id}`)),\r\n      catchError(this.handleError<any>('deleteProduct'))\r\n    );\r\n  }\r\n\r\n  private handleError<T> (operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      console.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n}"],"sourceRoot":""}