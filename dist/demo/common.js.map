{"version":3,"sources":["webpack:///./src/app/rest.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\nconst endpoint = 'https://ptway-dev.herokuapp.com/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestService {\n\n  constructor(private http: HttpClient) {}\n\n  private extractData(res: Response) {\n    let body = res;\n    return body || { };\n  }\n\n\n  getUsers(id): Observable<any> {\n    return this.http.get(endpoint + 'users/' + id).pipe(\n      map(this.extractData));\n  }\n\n  userRegistreing(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/userRegistreing', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`user Registre succes w/ id=${data.id}`)),\n      catchError(this.handleError<any>('userRegistreing'))\n    );\n  }\n\n  companyRegistreing(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/companyRegistreing', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`comapny Registre succes w/ id=${data.id}`)),\n      catchError(this.handleError<any>('companyRegistreing'))\n    );\n  }\n\n  postuserinfo(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/postuserinfo', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`user succes complete his data  w/ id=${data.id}`)),\n      catchError(this.handleError<any>('postuserinfo'))\n    );\n  }\n\n  userlogin(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/login', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`user login succes w/ id=${data.id}`)),\n      catchError(this.handleError<any>('userlogin'))\n    );\n  }\n\n  postcompanyinfo(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/postcompanyinfo', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`company succes complete data w/ id=${data.id}`)),\n      catchError(this.handleError<any>('postcompanyinfo'))\n    );\n  }\n\n  updateProduct (id, product): Observable<any> {\n    return this.http.put(endpoint + 'products/' + id, JSON.stringify(product), httpOptions).pipe(\n      tap(_ => console.log(`updated product id=${id}`)),\n      catchError(this.handleError<any>('updateProduct'))\n    );\n  }\n\n  deleteProduct (id): Observable<any> {\n    return this.http.delete<any>(endpoint + 'products/' + id, httpOptions).pipe(\n      tap(_ => console.log(`deleted product id=${id}`)),\n      catchError(this.handleError<any>('deleteProduct'))\n    );\n  }\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}"],"sourceRoot":""}