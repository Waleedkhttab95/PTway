{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/BehaviorSubject.js","webpack:///./src/app/add-job/job.service.ts","webpack:///./src/app/add-project/project.service.ts","webpack:///./src/app/data.service.ts","webpack:///./src/app/my-offers/offer.service.ts","webpack:///./src/app/rest.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["export { BehaviorSubject } from 'rxjs';\n//# sourceMappingURL=BehaviorSubject.js.map","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { Router } from '@angular/router';\nimport { JobData } from './job-data.model';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nconst BackUrl = 'https://cors-anywhere.herokuapp.com/https://ptway-dev.herokuapp.com/api';\n\n@Injectable({ providedIn: 'root' })\n\nexport class JobService {\n\n    private job: JobData[] = [];\n    private jobsUpdated = new Subject<{ posts: JobData[], jobCount: number }>();\n\n    constructor(private http: HttpClient, private router: Router) { }\n\n    private extractData(res: Response) {\n        let body = res;\n        return body || {};\n    }\n\n    addJob(data: any) {\n        this.http\n            .post<{ job: JobData }>(BackUrl + '/postjob', data)\n            .subscribe(responseData => {\n                console.log(responseData);\n                this.router.navigate(['/']);\n            });\n    }\n\n    sendJob(data: any) {\n        this.http\n            .post(BackUrl + '/send/Jobad', data)\n            .subscribe(responseData => {\n                this.router.navigate(['/']);\n            });\n    }\n\n    getJobs(id: String) {\n        return this.http.get<{jobNames: [String],  count: Number, id: [String]}>(BackUrl + '/get/jobs?projectid='+ id)\n    }\n\n  \n\n\n    getJob(id: String) {\n       return this.http\n            .get(BackUrl + '/getjob?id=' + id)\n           \n            ;\n    }\n\n    deleteJob(id: String) {\n      return this.http\n            .delete(BackUrl + '/deletejob?id=' + id);\n    }\n\n    // getcountry() {\n    //     this.http\n    //         .get(BackUrl + '/getcountry').subscribe(data => {\n    //             console.log(data);\n    //             return data;\n    //         });\n    // }\n    getcountry(): Observable<any> {\n        return this.http.get(BackUrl + '/getcountry').pipe(\n            map(this.extractData));\n    }\n\n    // getcity() {\n    //     this.http\n    //         .get(BackUrl + '/getcity').subscribe(data => {\n    //             console.log(data);\n    //             return data;\n    //         });\n    // }\n\n    getcity(): Observable<any> {\n        return this.http.get(BackUrl + '/getcity').pipe(\n            map(this.extractData));\n    }\n\n    getsectors() {\n        this.http\n            .get(BackUrl + '/getsectors').subscribe(data => {\n                console.log(data);\n                return data;\n            });\n    }\n\n    getspecialization() {\n        this.http\n            .get(BackUrl + '/getspec').subscribe(data => {\n                console.log(data);\n                return data;\n            });\n    }\n\n    // getcontracts() {\n    //     this.http\n    //     .get(BackUrl + '/getcontracts').subscribe(data =>{\n    //         console.log(data);\n    //         return data;\n    //     });\n    // }\n\n    getcontracts(): Observable<any> {\n        return this.http.get(BackUrl + '/getcontracts').pipe(\n            map(this.extractData));\n    }\n\n    // getprojects() {\n    //     this.http\n    //         .get(BackUrl + '/getprojects')\n    //         .subscribe(data => {\n    //             console.log(data);\n    //         });\n    // }\n\n    getprojects(id: String) {\n        return this.http\n        .get<{projectName: [String],  count: Number, id: [String]}>(BackUrl + '/getprojects?id='+ id)\n    }\n\n\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { ProjectData } from './project-data.model';\n\nconst BackUrl = 'https://cors-anywhere.herokuapp.com/https://ptway-dev.herokuapp.com/api';\n@Injectable({ providedIn: 'root' })\n\nexport class ProjectService {\n\n    // headers = new HttpHeaders({'Content-Type':'application/json; charset=utf-8'});\n\n    private project: ProjectData[] = [];\n    projectId: String;\n    constructor(private http: HttpClient, private router: Router) {}\n\n    addproject(data: any) {\n      this.http\n      .post<{project: ProjectData, _id: String}>(BackUrl + '/postproject' , data)\n      .subscribe(responseData => {\n          this.projectId = responseData._id;\n          console.log(this.projectId);\n\n         this.router.navigate(['/my-projects']);\n      });\n    }\n\n    getprojects() {\n        return this.http\n        .get<{projectName: [String],  count: Number, id: [String]}>(BackUrl + '/getprojects')\n    }\n\n    getproject(id: String) {\n       return this.http\n        .get<{projectName: String,  projectDescription: String, id: String}>(BackUrl + '/getproject?id=' + id);\n        \n    }\n\n    updateProject( data: any) {\n        const response =  this.http\n        .put(BackUrl+ '/put/project', data,{ responseType: 'text'})\n        .subscribe(responseData => {\n           this.router.navigate(['/my-projects']);\n        });;\n    }\n\n    deleteproject(id: String) {\n     return this.http\n        .delete(BackUrl + '/deleteproject?id=' + id);\n    }\n\n\n}","import {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport { Injectable } from '@angular/core';\n\n\n@Injectable({\n    providedIn: 'root'\n  })\nexport class DataService {\n    \n    private messageSource = new BehaviorSubject<string>('dd');\n    currentMessage = this.messageSource.asObservable();\n\n    private statusSource = new BehaviorSubject<boolean>(false);\n    currentStatus = this.statusSource.asObservable();\n\n    constructor() {}\n\n    changeMessage(message: string) {\n            this.messageSource.next(message);\n    }\n\n    changeStatus(status: boolean) {\n      this.statusSource.next(status);\n}\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nconst BackUrl = 'https://cors-anywhere.herokuapp.com/https://ptway-dev.herokuapp.com/api';\n@Injectable({ providedIn: 'root' })\n\nexport class offerService {\n\n    constructor(private http: HttpClient, private router: Router) {}\n\n    getCandidates(id: string) {\n       return this.http.get<{candidateNames: [string], username: [string] , count:Number, id:[string]}>(BackUrl+'/getOneCandi?jobAd='+id)\n    }\n\n    addCandidate(data: any) {\n        this.http.post(BackUrl+'/postBodyC',data).subscribe(() =>{\n            this.router.navigate(['/']);\n\n        })\n    }\n\n    addAcceptence(data: any) {\n        this.http.post(BackUrl+'/postAcc' , data).subscribe(result =>{\n            console.log(result)\n            this.router.navigate(['/candidates-list']);\n        });\n    }\n\n    getAcceptence(id: string) {\n        return this.http.get<{AcceptedNames: [string], username: [string] , count:Number, id:[string]}>(BackUrl+'/getOneAccepted?jobAd='+id)\n    }\n\n    startJob(data: any) {\n        this.http.post(BackUrl+'/start/job', data).subscribe(result =>{\n            this.router.navigate(['/acceptance-list']);\n\n        })\n    }\n\n    endJob(data: any) {\n        const response = this.http.post(BackUrl+'/end/job', data,{ responseType: 'text'}).subscribe(result =>{\n            this.router.navigate(['/acceptance-list']);\n\n        })\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\n\nconst endpoint = 'https://ptway-dev.herokuapp.com/';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type':  'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RestService {\n\n  constructor(private http: HttpClient) {}\n\n  private extractData(res: Response) {\n    let body = res;\n    return body || { };\n  }\n\n\n  getUsers(id): Observable<any> {\n    return this.http.get(endpoint + 'users/' + id).pipe(\n      map(this.extractData));\n  }\n\n  userRegistreing(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/userRegistreing', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`user Registre succes w/ id=${data.id}`)),\n      catchError(this.handleError<any>('userRegistreing'))\n    );\n  }\n\n  companyRegistreing(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/companyRegistreing', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`comapny Registre succes w/ id=${data.id}`)),\n      catchError(this.handleError<any>('companyRegistreing'))\n    );\n  }\n\n  postuserinfo(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/postuserinfo', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`user succes complete his data  w/ id=${data.id}`)),\n      catchError(this.handleError<any>('postuserinfo'))\n    );\n  }\n\n  userlogin(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/login', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`user login succes w/ id=${data.id}`)),\n      catchError(this.handleError<any>('userlogin'))\n    );\n  }\n\n  postcompanyinfo(data:any): Observable<any> {\n    console.log(data);\n    return this.http.post<any>(endpoint + 'api/postcompanyinfo', JSON.stringify(data), httpOptions).pipe(\n      tap((data) => console.log(`company succes complete data w/ id=${data.id}`)),\n      catchError(this.handleError<any>('postcompanyinfo'))\n    );\n  }\n\n  updateProduct (id, product): Observable<any> {\n    return this.http.put(endpoint + 'products/' + id, JSON.stringify(product), httpOptions).pipe(\n      tap(_ => console.log(`updated product id=${id}`)),\n      catchError(this.handleError<any>('updateProduct'))\n    );\n  }\n\n  deleteProduct (id): Observable<any> {\n    return this.http.delete<any>(endpoint + 'products/' + id, httpOptions).pipe(\n      tap(_ => console.log(`deleted product id=${id}`)),\n      catchError(this.handleError<any>('deleteProduct'))\n    );\n  }\n\n  private handleError<T> (operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n\n      // TODO: better job of transforming error for user consumption\n      console.log(`${operation} failed: ${error.message}`);\n\n      // Let the app keep running by returning an empty result.\n      return of(result as T);\n    };\n  }\n}"],"sourceRoot":""}